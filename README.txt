#How to configure the SwitchIllumina pipeline from https://bitbucket.org/mathildefog/switchillumina/src/master/ 
to work in 2022. Original pipeline script updated here and separated out into bash scripts to enable easy running and debugging. Some programmes have been updated to avoid bugs in older versions as long as they retain the informatic function intended in the original pipeline. Original paper reference: Pieper K, Tan J, Piccoli L, Foglierini M, Barbieri S, Chen Y, Silacci-Fregni C, Wolf T, Jarrossay D, Anderle M, Abdi A, Ndungu FM, Doumbo OK, Traore B, Tran TM, Jongo S, Zenklusen I, Crompton PD, Daubenberger C, Bull PC, Sallusto F, Lanzavecchia A. Public antibodies to malaria antigens generated by two LAIR1 insertion modalities. Nature. 2017 Aug 31;548(7669):597-601. doi: 10.1038/nature23670. Epub 2017 Aug 23. PMID: 28847005; PMCID: PMC5635981. Available from https://pubmed.ncbi.nlm.nih.gov/28847005/ 

#Setting up the environment
#Linux
#Create a python 2.70 environment.
#Load the following versions of the programmes listed on 
https://bitbucket.org/mathildefog/switchillumina/src/master/

# except for:	
	#fastqc version 0.11.9. 
	# bcftools version 1.15 via bioconda
#Versions used that not specified in original pipeline:	
	# trimgalore 0.6.7
	
#Changes from original pipeline script:
	# fastqc 0.11.5 would have the the version used for the original pipeline as per the dates. This is no 
longer available. The only change that may affect this pipeline is that v0.11.6 and beyond automatically disable 
the kmer module. Due to the nature of the swith region we would like to keep over-represented sequences, and 
therefore the module was re-enabled as per the v0.11.6 instructions on github 
https://github.com/s-andrews/FastQC/releases.
	# samtools command in step 2: now reads $samtools sort $SAMPLE.notSorted.bam -o $SAMPLE.bam  This allows 
it to be compatible with later versions of samtools that required the -o.

#AfterTrinitySelectInsert_NEW bash script and version changes
	#bcftools loaded via bioconda (version 1.15)
	#check the selectedInsert_$DONOR_bpCoverage_annotated.tsv file for the max depth (more depth will take 
longer to run. Inserts are expected to be <2000bp long as per the original paper (Pieper et al 2017). Deeper sequencing = more inserts found (unpublished) so I advise making d- = the maximum depth. bcftools mpileup will use the first d- <number> reads. 
	#change mpileup depth to d-<number> using:
#bcftools mpileup -f $HG19DIR/hg19.fasta $DONOR.inserts.bam --max-depth <INT> 

# Test runs:
	# Scripts here will enable each component of the pipeline to be tested individually so bespoke changes can be made.
	# I have left in the grid engine intructions for each script to give a 'ball-park' estimate for running. This work was undertaken on ARC3, part of the High Performance Computing facilities at the University of Leeds, UK https://arcdocs.leeds.ac.uk/welcome.html. 
	
# Analysis runs:
	# The scripts 'beforetrinity.sh', 'trinity.sh' and 'aftertrinity_NEW' collate sets of scripts into sections to enable simple running, debugging and extraction of results. Depending on your computing system, they could be collated. Trinity likes to run in paralled, hence why it is separated out. It will error if given insuffiencnt compute. It will also error if contigs incomplete due to inadequate depth. Unhelpfully this generates the same exit error code. 
	
# Recommendations for larger projects:
	# Trinity could be replaced by a more computationally efficient de novo transcription assembler. A good review of programmes is in this paper: https://academic.oup.com/gigascience/article/8/9/giz100/5559527. Changing the assembler will require review of the original java scripts. 
	# Python version could be updated, but will require review of the original scripts because they are not compatible with later versions.
